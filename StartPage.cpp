/* This file was generated by the Hex-Rays decompiler.
   Copyright (c) 2007-2020 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <windows.h>


//-------------------------------------------------------------------------
// Local types

struct sStruct01
{
    struct sStruct02 *sStruct02;
    BYTE Var02[8];
    HWND hWnd;
};

struct sStruct02
{
    BYTE Var01[12];
    int (__stdcall *CShellStartPage_Create)(sStruct01 *, HWND, char *);
};

struct sStruct03
{
    BYTE Var01[4];
    int Var02;
    BYTE Var03[8];
};

//-------------------------------------------------------------------------
// Function declarations

int MsgBox(LPCWSTR lpText);
int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd);
LRESULT ShellStartPageWndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);


//----- (00412040) --------------------------------------------------------
int MsgBox(LPCWSTR lpText)
{
    return MessageBoxW(NULL, lpText, L"CShellStartPage", MB_ICONWARNING);
}

//----- (004120B0) --------------------------------------------------------
int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
    HWND hWnd;
    struct tagMSG msg;
    sStruct02 *vStruct02;
    // BOOL IsHooked;
    int (__stdcall *CShellStartPage_Create)(sStruct01 *, HWND, char *);
    IID iid;
    CLSID pclsid;
    sStruct01 *ppv;
    HRESULT result;
    char Var10[12];
    HWND hWindow;
    sStruct03 *vStruct03;
    WNDCLASSW *lpWndClass;
    HANDLE hObject;
    HANDLE hEvent;

    CShellStartPage_Create = 0;
    // IsHooked = HookCreateFile();
    hEvent = CreateEventW(NULL, TRUE, FALSE, L"StartpageReadyEvent");
    if (hEvent)
    {
        if (OleInitialize(NULL) >= 0)
        {
            vStruct03 = (sStruct03 *)malloc(sizeof(sStruct03));
            memset(vStruct03, 0, sizeof(sStruct03));
            vStruct03->Var02 = 1;
            lpWndClass = (WNDCLASSW *)malloc(sizeof(WNDCLASSW));
            memset(lpWndClass, 0, sizeof(WNDCLASSW));
            lpWndClass->lpszClassName = L"ShellStartPage";
            lpWndClass->lpfnWndProc = (WNDPROC)ShellStartPageWndProc;
            lpWndClass->hCursor = LoadCursorW(NULL, (LPCWSTR)IDC_ARROW);
            lpWndClass->hbrBackground = (HBRUSH)BACKGROUND_BLUE;
            lpWndClass->cbWndExtra = 4;
            lpWndClass->hInstance = GetModuleHandleW(NULL);
            if (RegisterClassW(lpWndClass))
            {
                hWindow = CreateWindowExW(WS_EX_TOOLWINDOW, lpWndClass->lpszClassName, NULL, WS_POPUP, 0, 0, 0, 0, NULL, NULL, lpWndClass->hInstance, NULL);
                if (hWindow)
                {
                    CLSIDFromString(L"{8DA27716-B6B1-44BE-82B7-2ACFFB37C45F}", &pclsid);
                    IIDFromString(L"{9AD468E6-00E2-4357-9D01-6FFA43E31BED}", &iid);
                    result = CoCreateInstance(pclsid, NULL, CLSCTX_INPROC_SERVER, iid, (LPVOID *)&ppv);
                    if (result >= 0)
                    {
                        vStruct02 = ppv->sStruct02;
                        CShellStartPage_Create = vStruct02->CShellStartPage_Create;
                        if (CShellStartPage_Create)
                        {
                            if (CShellStartPage_Create(ppv, hWindow, Var10))
                            {
                                MsgBox(L"CShellStartPage_Create failed!");
                            }
                            else
                            {
                                SetEvent(hEvent);
                                hObject = CreateEventW(NULL, TRUE, TRUE, L"ShellReadyEvent");
                                while (1)
                                {
                                    while (!PeekMessageW(&msg, NULL, 0, 0, PM_REMOVE))
                                    {
                                        WaitMessage();
                                    }
                                    if (msg.message == WM_QUIT)
                                    {
                                        break;
                                    }
                                    TranslateMessage(&msg);
                                    DispatchMessageW(&msg);
                                }
                                hWnd = ppv->hWnd;
                                if (IsWindow(hWnd))
                                {
                                    SendMessageW(hWnd, WM_ENDSESSION, TRUE, 0);
                                }
                                CloseHandle(hObject);
                                free(vStruct03);
                            }
                        }
                        else
                        {
                            MsgBox(L"Could not call CShellStartPage_Create!");
                        }
                    }
                    else
                    {
                        MsgBox(L"Could not create COM object!");
                    }
                }
            }
            else
            {
                MsgBox(L"Could not create window class!");
            }
            CloseHandle(hEvent);
            OleUninitialize();
        }
        else
        {
            MsgBox(L"Could not initialize OLE!");
        }
    }
    else
    {
        MsgBox(L"Could not create event!");
    }
    // CreateFileA("\\\\shelltest\\scratch\\ewad\\oobe.xml", 0, 0, 0, 0, 0, 0);
    // if (IsHooked)
    // {
        // UnhookCreateFile();
    // }
    return 0;
}

//----- (00412630) --------------------------------------------------------
LRESULT ShellStartPageWndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    if (msg == WM_DESTROY)
    {
        PostQuitMessage(0);
    }
    else
    {
        if (msg != WM_CLOSE)
        {
            return DefWindowProcW(hWnd, msg, wParam, lParam);
        }
        DestroyWindow(hWnd);
    }
    return 0;
}
